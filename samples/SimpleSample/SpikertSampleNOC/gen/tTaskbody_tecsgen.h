/*
 * This file was automatically generated by tecsgen.
 * This file is not intended to be edited.
 */
#ifndef tTaskbody_TECSGEN_H
#define tTaskbody_TECSGEN_H

/*
 * celltype          :  tTaskbody
 * global name       :  tTaskbody
 * multi-domain      :  no
 * idx_is_id(actual) :  no(no)
 * singleton         :  no
 * has_CB            :  no
 * has_INIB          :  yes
 * rom               :  yes
 * CB initializer    :  no
 */

/* global header #_IGH_# */
#include "global_tecsgen.h"

/* signature header #_ISH_# */
#include "sTaskBody_tecsgen.h"
#include "sSensor_tecsgen.h"
#include "sMotor_tecsgen.h"

#ifndef TOPPERS_MACRO_ONLY

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* cell INIB type definition #_CIP_# */
typedef const struct tag_tTaskbody_INIB {
    /* call port #_TCP_# */
    struct tag_sSensor_VDES const*cSensor; /* TCP_2 */
    struct tag_sMotor_VDES const*cMotor; /* TCP_2 */
    /* call port #_NEP_# */ 
}  tTaskbody_INIB;

/* CB not exist. CB corresponding to INIB #_DCI_# */
#define tTaskbody_CB_tab           tTaskbody_INIB_tab
#define tTaskbody_CB               tTaskbody_INIB
#define tag_tTaskbody_CB           tag_tTaskbody_INIB

/* singleton cell CB prototype declaration #_MCPB_# */
extern tTaskbody_INIB  tTaskbody_INIB_tab[];

/* celltype IDX type #_CTIX_# */
typedef const struct tag_tTaskbody_INIB *tTaskbody_IDX;

/* prototype declaration of entry port function #_EPP_# */
/* sTaskBody */
void         tTaskbody_eTaskbody_main(tTaskbody_IDX idx);
#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* TOPPERS_MACRO_ONLY */

#ifndef TOPPERS_CB_TYPE_ONLY

#define tTaskbody_ID_BASE           (1)  /* ID Base  #_NIDB_# */
#define tTaskbody_N_CELL            (1)  /*  number of cells  #_NCEL_# */

/* IDX validation macro #_CVI_# */
#define tTaskbody_VALID_IDX(IDX) (1)


/* celll CB macro #_GCB_# */
#define tTaskbody_GET_CELLCB(idx) (idx)
#ifndef TECSFLOW
 /* call port function macro #_CPM_# */
#define tTaskbody_cSensor_set_device_ref( p_that ) \
	  (p_that)->cSensor->VMT->set_device_ref__T( \
	   (p_that)->cSensor )
#define tTaskbody_cSensor_get_distance( p_that, distance ) \
	  (p_that)->cSensor->VMT->get_distance__T( \
	   (p_that)->cSensor, (distance) )
#define tTaskbody_cSensor_light_on( p_that ) \
	  (p_that)->cSensor->VMT->light_on__T( \
	   (p_that)->cSensor )
#define tTaskbody_cSensor_light_set( p_that, bv1, bv2, bv3, bv4 ) \
	  (p_that)->cSensor->VMT->light_set__T( \
	   (p_that)->cSensor, (bv1), (bv2), (bv3), (bv4) )
#define tTaskbody_cSensor_light_off( p_that ) \
	  (p_that)->cSensor->VMT->light_off__T( \
	   (p_that)->cSensor )
#define tTaskbody_cMotor_set_motor_ref( p_that ) \
	  (p_that)->cMotor->VMT->set_motor_ref__T( \
	   (p_that)->cMotor )
#define tTaskbody_cMotor_setup( p_that, positive_direction, reset_count ) \
	  (p_that)->cMotor->VMT->setup__T( \
	   (p_that)->cMotor, (positive_direction), (reset_count) )
#define tTaskbody_cMotor_set_speed( p_that, speed ) \
	  (p_that)->cMotor->VMT->set_speed__T( \
	   (p_that)->cMotor, (speed) )
#define tTaskbody_cMotor_stop( p_that ) \
	  (p_that)->cMotor->VMT->stop__T( \
	   (p_that)->cMotor )

#else  /* TECSFLOW */
#define tTaskbody_cSensor_set_device_ref( p_that ) \
	  (p_that)->cSensor.set_device_ref__T( \
 )
#define tTaskbody_cSensor_get_distance( p_that, distance ) \
	  (p_that)->cSensor.get_distance__T( \
 (distance) )
#define tTaskbody_cSensor_light_on( p_that ) \
	  (p_that)->cSensor.light_on__T( \
 )
#define tTaskbody_cSensor_light_set( p_that, bv1, bv2, bv3, bv4 ) \
	  (p_that)->cSensor.light_set__T( \
 (bv1), (bv2), (bv3), (bv4) )
#define tTaskbody_cSensor_light_off( p_that ) \
	  (p_that)->cSensor.light_off__T( \
 )
#define tTaskbody_cMotor_set_motor_ref( p_that ) \
	  (p_that)->cMotor.set_motor_ref__T( \
 )
#define tTaskbody_cMotor_setup( p_that, positive_direction, reset_count ) \
	  (p_that)->cMotor.setup__T( \
 (positive_direction), (reset_count) )
#define tTaskbody_cMotor_set_speed( p_that, speed ) \
	  (p_that)->cMotor.set_speed__T( \
 (speed) )
#define tTaskbody_cMotor_stop( p_that ) \
	  (p_that)->cMotor.stop__T( \
 )

#endif /* TECSFLOW */
#endif /* TOPPERS_CB_TYPE_ONLY */

#ifndef TOPPERS_MACRO_ONLY

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/* prototype declaration of entry port function (referenced when VMT useless optimise enabled) #_EPSP_# */
/* eTaskbody */
void           tTaskbody_eTaskbody_main_skel( const struct tag_sTaskBody_VDES *epd);

#ifndef TOPPERS_CB_TYPE_ONLY

#endif /* TOPPERS_CB_TYPE_ONLY */

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* TOPPERS_MACRO_ONLY */

#ifndef TOPPERS_CB_TYPE_ONLY

/* IDX validation macro (abbrev.) #_CVIA_# */
#define VALID_IDX(IDX)  tTaskbody_VALID_IDX(IDX)


/* cell CB macro (abbrev) #_GCBA_# */
#define GET_CELLCB(idx)  tTaskbody_GET_CELLCB(idx)

/* CELLCB type (abbrev) #_CCT_# */
#define CELLCB	tTaskbody_CB

/* celltype IDX type (abbrev) #_CTIXA_# */
#define CELLIDX	tTaskbody_IDX

/* call port function macro (abbrev) #_CPMA_# */
#define cSensor_set_device_ref( ) \
          tTaskbody_cSensor_set_device_ref( p_cellcb )
#define cSensor_get_distance( distance ) \
          tTaskbody_cSensor_get_distance( p_cellcb, distance )
#define cSensor_light_on( ) \
          tTaskbody_cSensor_light_on( p_cellcb )
#define cSensor_light_set( bv1, bv2, bv3, bv4 ) \
          tTaskbody_cSensor_light_set( p_cellcb, bv1, bv2, bv3, bv4 )
#define cSensor_light_off( ) \
          tTaskbody_cSensor_light_off( p_cellcb )
#define cMotor_set_motor_ref( ) \
          tTaskbody_cMotor_set_motor_ref( p_cellcb )
#define cMotor_setup( positive_direction, reset_count ) \
          tTaskbody_cMotor_setup( p_cellcb, positive_direction, reset_count )
#define cMotor_set_speed( speed ) \
          tTaskbody_cMotor_set_speed( p_cellcb, speed )
#define cMotor_stop( ) \
          tTaskbody_cMotor_stop( p_cellcb )




/* entry port function macro (abbrev) #_EPM_# */
#define eTaskbody_main   tTaskbody_eTaskbody_main

/* iteration code (FOREACH_CELL) #_FEC_# */
#define FOREACH_CELL(i,p_cb)   \
    for( (i) = 0; (i) < tTaskbody_N_CELL; (i)++ ){ \
       //(p_cb) = &tTaskbody_CB_tab[i];

#define END_FOREACH_CELL   }

/* CB initialize macro #_CIM_# */
#endif /* TOPPERS_CB_TYPE_ONLY */

#ifndef TOPPERS_MACRO_ONLY

#endif /* TOPPERS_MACRO_ONLY */

#endif /* tTaskbody_TECSGENH */
