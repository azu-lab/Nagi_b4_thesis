/*
 * This file was automatically generated by tecsgen.
 * This file is not intended to be edited.
 */
#ifndef tPrint_TECSGEN_H
#define tPrint_TECSGEN_H

/*
 * celltype          :  tPrint
 * global name       :  tPrint
 * multi-domain      :  no
 * idx_is_id(actual) :  no(no)
 * singleton         :  no
 * has_CB            :  yes
 * has_INIB          :  yes
 * rom               :  yes
 * CB initializer    :  yes
 */

/* global header #_IGH_# */
#include "global_tecsgen.h"

/* signature header #_ISH_# */
#include "sTaskBody_tecsgen.h"
#include "sTask_tecsgen.h"

#ifndef TOPPERS_MACRO_ONLY

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
/* cell INIB type definition #_CIP_# */
typedef const struct tag_tPrint_INIB {
    /* call port #_TCP_# */
    /* call port #_NEP_# */ 
    /* attribute(RO) #_ATO_# */ 
    int32_t        printattr;
}  tPrint_INIB;
/* cell CB type definition #_CCTPA_# */
typedef struct tag_tPrint_CB {
    tPrint_INIB  *_inib;
    /* call port #_TCP_# */
    /* call port #_NEP_# */ 
    /* var #_VA_# */ 
    int32_t        printvar;
}  tPrint_CB;
/* singleton cell CB prototype declaration #_MCPB_# */
extern tPrint_CB  tPrint_CB_tab[];

/* celltype IDX type #_CTIX_# */
typedef struct tag_tPrint_CB *tPrint_IDX;

/* prototype declaration of entry port function #_EPP_# */
/* sTaskBody */
void         tPrint_ePrint_main(tPrint_IDX idx);
#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* TOPPERS_MACRO_ONLY */

/* to get the definition of CB type of referenced celltype for optimization #_ICT_# */
#ifndef  TOPPERS_CB_TYPE_ONLY
#define  tPrint_CB_TYPE_ONLY
#define TOPPERS_CB_TYPE_ONLY
#endif  /* TOPPERS_CB_TYPE_ONLY */
#include "tTask_tecsgen.h"
#ifdef  tPrint_CB_TYPE_ONLY
#undef TOPPERS_CB_TYPE_ONLY
#endif /* tPrint_CB_TYPE_ONLY */
#ifndef TOPPERS_CB_TYPE_ONLY

#define tPrint_ID_BASE              (1)  /* ID Base  #_NIDB_# */
#define tPrint_N_CELL               (1)  /*  number of cells  #_NCEL_# */

/* IDX validation macro #_CVI_# */
#define tPrint_VALID_IDX(IDX) (1)


/* celll CB macro #_GCB_# */
#define tPrint_GET_CELLCB(idx) (idx)

/* attr access  #_AAM_# */
#define tPrint_ATTR_printattr( p_that )	((p_that)->_inib->printattr)

#define tPrint_GET_printattr(p_that)	((p_that)->_inib->printattr)


/* var access macro #_VAM_# */
#define tPrint_VAR_printvar(p_that)	((p_that)->printvar)

#define tPrint_GET_printvar(p_that)	((p_that)->printvar)
#define tPrint_SET_printvar(p_that,val)	((p_that)->printvar=(val))

#ifndef TECSFLOW
 /* call port function macro #_CPM_# */
#define tPrint_cTask_activate( p_that ) \
	  tTask_eTask_activate( \
	   &tTask_INIB_tab[0] )
#define tPrint_cTask_cancelActivate( p_that ) \
	  tTask_eTask_cancelActivate( \
	   &tTask_INIB_tab[0] )
#define tPrint_cTask_getTaskState( p_that, p_tskstat ) \
	  tTask_eTask_getTaskState( \
	   &tTask_INIB_tab[0], (p_tskstat) )
#define tPrint_cTask_changePriority( p_that, priority ) \
	  tTask_eTask_changePriority( \
	   &tTask_INIB_tab[0], (priority) )
#define tPrint_cTask_getPriority( p_that, p_priority ) \
	  tTask_eTask_getPriority( \
	   &tTask_INIB_tab[0], (p_priority) )
#define tPrint_cTask_refer( p_that, pk_taskStatus ) \
	  tTask_eTask_refer( \
	   &tTask_INIB_tab[0], (pk_taskStatus) )
#define tPrint_cTask_wakeup( p_that ) \
	  tTask_eTask_wakeup( \
	   &tTask_INIB_tab[0] )
#define tPrint_cTask_cancelWakeup( p_that ) \
	  tTask_eTask_cancelWakeup( \
	   &tTask_INIB_tab[0] )
#define tPrint_cTask_releaseWait( p_that ) \
	  tTask_eTask_releaseWait( \
	   &tTask_INIB_tab[0] )
#define tPrint_cTask_suspend( p_that ) \
	  tTask_eTask_suspend( \
	   &tTask_INIB_tab[0] )
#define tPrint_cTask_resume( p_that ) \
	  tTask_eTask_resume( \
	   &tTask_INIB_tab[0] )
#define tPrint_cTask_raiseTerminate( p_that ) \
	  tTask_eTask_raiseTerminate( \
	   &tTask_INIB_tab[0] )
#define tPrint_cTask_terminate( p_that ) \
	  tTask_eTask_terminate( \
	   &tTask_INIB_tab[0] )

#else  /* TECSFLOW */
#define tPrint_cTask_activate( p_that ) \
	  (p_that)->cTask.activate__T( \
 )
#define tPrint_cTask_cancelActivate( p_that ) \
	  (p_that)->cTask.cancelActivate__T( \
 )
#define tPrint_cTask_getTaskState( p_that, p_tskstat ) \
	  (p_that)->cTask.getTaskState__T( \
 (p_tskstat) )
#define tPrint_cTask_changePriority( p_that, priority ) \
	  (p_that)->cTask.changePriority__T( \
 (priority) )
#define tPrint_cTask_getPriority( p_that, p_priority ) \
	  (p_that)->cTask.getPriority__T( \
 (p_priority) )
#define tPrint_cTask_refer( p_that, pk_taskStatus ) \
	  (p_that)->cTask.refer__T( \
 (pk_taskStatus) )
#define tPrint_cTask_wakeup( p_that ) \
	  (p_that)->cTask.wakeup__T( \
 )
#define tPrint_cTask_cancelWakeup( p_that ) \
	  (p_that)->cTask.cancelWakeup__T( \
 )
#define tPrint_cTask_releaseWait( p_that ) \
	  (p_that)->cTask.releaseWait__T( \
 )
#define tPrint_cTask_suspend( p_that ) \
	  (p_that)->cTask.suspend__T( \
 )
#define tPrint_cTask_resume( p_that ) \
	  (p_that)->cTask.resume__T( \
 )
#define tPrint_cTask_raiseTerminate( p_that ) \
	  (p_that)->cTask.raiseTerminate__T( \
 )
#define tPrint_cTask_terminate( p_that ) \
	  (p_that)->cTask.terminate__T( \
 )

#endif /* TECSFLOW */
#endif /* TOPPERS_CB_TYPE_ONLY */

#ifndef TOPPERS_MACRO_ONLY

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

/* prototype declaration of entry port function (referenced when VMT useless optimise enabled) #_EPSP_# */

#ifndef TOPPERS_CB_TYPE_ONLY

#endif /* TOPPERS_CB_TYPE_ONLY */

#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* TOPPERS_MACRO_ONLY */

#ifndef TOPPERS_CB_TYPE_ONLY

/* IDX validation macro (abbrev.) #_CVIA_# */
#define VALID_IDX(IDX)  tPrint_VALID_IDX(IDX)


/* cell CB macro (abbrev) #_GCBA_# */
#define GET_CELLCB(idx)  tPrint_GET_CELLCB(idx)

/* CELLCB type (abbrev) #_CCT_# */
#define CELLCB	tPrint_CB

/* celltype IDX type (abbrev) #_CTIXA_# */
#define CELLIDX	tPrint_IDX


/* attr access macro (abbrev) #_AAMA_# */
#define ATTR_printattr       tPrint_ATTR_printattr( p_cellcb )


/* var access macro (abbrev) #_VAMA_# */
#define VAR_printvar         tPrint_VAR_printvar( p_cellcb )

/* call port function macro (abbrev) #_CPMA_# */
#define cTask_activate( ) \
          ((void)p_cellcb, tPrint_cTask_activate( p_cellcb ))
#define cTask_cancelActivate( ) \
          ((void)p_cellcb, tPrint_cTask_cancelActivate( p_cellcb ))
#define cTask_getTaskState( p_tskstat ) \
          ((void)p_cellcb, tPrint_cTask_getTaskState( p_cellcb, p_tskstat ))
#define cTask_changePriority( priority ) \
          ((void)p_cellcb, tPrint_cTask_changePriority( p_cellcb, priority ))
#define cTask_getPriority( p_priority ) \
          ((void)p_cellcb, tPrint_cTask_getPriority( p_cellcb, p_priority ))
#define cTask_refer( pk_taskStatus ) \
          ((void)p_cellcb, tPrint_cTask_refer( p_cellcb, pk_taskStatus ))
#define cTask_wakeup( ) \
          ((void)p_cellcb, tPrint_cTask_wakeup( p_cellcb ))
#define cTask_cancelWakeup( ) \
          ((void)p_cellcb, tPrint_cTask_cancelWakeup( p_cellcb ))
#define cTask_releaseWait( ) \
          ((void)p_cellcb, tPrint_cTask_releaseWait( p_cellcb ))
#define cTask_suspend( ) \
          ((void)p_cellcb, tPrint_cTask_suspend( p_cellcb ))
#define cTask_resume( ) \
          ((void)p_cellcb, tPrint_cTask_resume( p_cellcb ))
#define cTask_raiseTerminate( ) \
          ((void)p_cellcb, tPrint_cTask_raiseTerminate( p_cellcb ))
#define cTask_terminate( ) \
          ((void)p_cellcb, tPrint_cTask_terminate( p_cellcb ))




/* entry port function macro (abbrev) #_EPM_# */
#define ePrint_main      tPrint_ePrint_main

/* iteration code (FOREACH_CELL) #_FEC_# */
#define FOREACH_CELL(i,p_cb)   \
    for( (i) = 0; (i) < tPrint_N_CELL; (i)++ ){ \
       (p_cb) = &tPrint_CB_tab[i];

#define END_FOREACH_CELL   }

/* CB initialize macro #_CIM_# */
#define INITIALIZE_CB(p_that)\
	(p_that)->printvar = 10;
#define SET_CB_INIB_POINTER(i,p_that)\
	(p_that)->_inib = &tPrint_INIB_tab[(i)];

#endif /* TOPPERS_CB_TYPE_ONLY */

#ifndef TOPPERS_MACRO_ONLY

#endif /* TOPPERS_MACRO_ONLY */

#endif /* tPrint_TECSGENH */
